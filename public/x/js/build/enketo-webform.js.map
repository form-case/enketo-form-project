{
  "version": 3,
  "sources": ["../src/module/application-cache.js", "../src/enketo-webform.js"],
  "sourcesContent": ["/**\n * Deals with storing the app using service workers.\n */\n\nimport events from './event';\nimport settings from './settings';\n\nfunction init(survey) {\n    if ('serviceWorker' in navigator) {\n        window.addEventListener('load', () => {\n            navigator.serviceWorker\n                .register(`${settings.basePath}/x/offline-app-worker.js`)\n                .then(\n                    (registration) => {\n                        // Registration was successful\n                        console.log(\n                            'Offline application service worker registration successful with scope: ',\n                            registration.scope\n                        );\n                        setInterval(\n                            () => {\n                                console.log(\n                                    'Checking for offline application cache service worker update'\n                                );\n                                registration.update();\n                            },\n                            60 * 60 * 1000\n                        );\n\n                        if (registration.active) {\n                            _reportOfflineLaunchCapable(true);\n                        }\n                        registration.addEventListener('updatefound', () => {\n                            const newWorker = registration.installing;\n\n                            newWorker.addEventListener('statechange', () => {\n                                if (newWorker.state === 'activated') {\n                                    console.log(\n                                        'New offline application service worker activated!'\n                                    );\n                                    document.dispatchEvent(\n                                        events.ApplicationUpdated()\n                                    );\n                                }\n                            });\n                        });\n                    },\n                    (err) => {\n                        // registration failed :(\n                        console.error(\n                            'Offline application service worker registration failed: ',\n                            err\n                        );\n                        _reportOfflineLaunchCapable(true);\n                    }\n                );\n        });\n    } else {\n        if (location.protocol.startsWith('http:')) {\n            console.error(\n                'Service workers not supported on this http URL (insecure)'\n            );\n        } else {\n            console.error(\n                'Service workers not supported on this browser. This form cannot launch online'\n            );\n        }\n        _reportOfflineLaunchCapable(false);\n    }\n\n    return Promise.resolve(survey);\n}\n\nfunction _reportOfflineLaunchCapable(capable = true) {\n    document.dispatchEvent(events.OfflineLaunchCapable({ capable }));\n}\n\nexport default {\n    init,\n    get serviceWorkerScriptUrl() {\n        if (\n            'serviceWorker' in navigator &&\n            navigator.serviceWorker.controller\n        ) {\n            return navigator.serviceWorker.controller.scriptURL;\n        }\n\n        return null;\n    },\n};\n", "import { FormModel } from 'enketo-core/src/js/form-model';\nimport gui from './module/gui';\nimport controller from './module/controller-webform';\nimport settings from './module/settings';\nimport connection from './module/connection';\nimport {\n    init as initTranslator,\n    t,\n    localize,\n    loadTranslation,\n} from './module/translator';\nimport store from './module/store';\nimport utils from './module/utils';\nimport events from './module/event';\nimport formCache from './module/form-cache';\nimport applicationCache from './module/application-cache';\n\nconst loader = document.querySelector('.main-loader');\nconst formheader = document.querySelector('.main > .paper > .form-header');\nconst survey = {\n    enketoId: settings.enketoId,\n    xformUrl: settings.xformUrl,\n    defaults: settings.defaults,\n};\nconst range = document.createRange();\n\n_setEmergencyHandlers();\n\nif (settings.offline) {\n    console.log('App in offline-capable mode.');\n    delete survey.xformUrl;\n    _setAppCacheEventHandlers();\n    applicationCache\n        .init(survey)\n        .then(initTranslator)\n        .then(formCache.init)\n        .then(_addBranding)\n        .then(_swapTheme)\n        .then(formCache.updateMaxSubmissionSize)\n        .then(_updateMaxSizeSetting)\n        .then(_init)\n        .then((formParts) => {\n            formParts.languages.forEach(loadTranslation);\n\n            return formParts;\n        })\n        .then(formCache.updateMedia)\n        .then(_setFormCacheEventHandlers)\n        .catch(_showErrorOrAuthenticate);\n} else {\n    console.log('App in online-only mode.');\n    const isPreview = settings.type === 'preview';\n\n    store\n        .init({ failSilently: true })\n        .then(() => initTranslator(survey))\n        .then((props) =>\n            connection.getFormParts({\n                ...props,\n                isPreview,\n            })\n        )\n        .then(_swapTheme)\n        .then(_addBranding)\n        .then((survey) => {\n            if (isPreview && settings.xformUrl) {\n                return survey;\n            }\n\n            return connection.getMaximumSubmissionSize(survey);\n        })\n        .then(_updateMaxSizeSetting)\n        .then(_init)\n        .catch(_showErrorOrAuthenticate);\n}\n\nfunction _updateMaxSizeSetting(survey) {\n    if (survey.maxSize) {\n        // overwrite default max size\n        settings.maxSize = survey.maxSize;\n    }\n\n    return survey;\n}\n\nfunction _showErrorOrAuthenticate(error) {\n    error = typeof error === 'string' ? new Error(error) : error;\n    loader.classList.add('fail');\n\n    if (error.status === 401) {\n        window.location.href = `${\n            settings.loginUrl\n        }?return_url=${encodeURIComponent(window.location.href)}`;\n    } else if (error.status === 404) {\n        gui.alertLoadErrors([error.message], null, {\n            omitIntro: true,\n            omitSupportContact: true,\n        });\n    } else {\n        if (!Array.isArray(error)) {\n            error = [error.message || t('error.unknown')];\n        }\n\n        gui.alertLoadErrors(error, t('alert.loaderror.entryadvice'));\n    }\n}\n\nfunction _setAppCacheEventHandlers() {\n    document.addEventListener(events.OfflineLaunchCapable().type, (event) => {\n        const { capable } = event.detail;\n        gui.updateStatus.offlineCapable(capable);\n\n        const scriptUrl = applicationCache.serviceWorkerScriptUrl;\n        if (scriptUrl) {\n            connection\n                .getServiceWorkerVersion(scriptUrl)\n                .then(gui.updateStatus.applicationVersion);\n        }\n    });\n\n    document.addEventListener(events.ApplicationUpdated().type, () => {\n        gui.feedback(\n            t('alert.appupdated.msg'),\n            20,\n            t('alert.appupdated.heading')\n        );\n    });\n}\n\nfunction _setFormCacheEventHandlers(survey) {\n    document.addEventListener(events.FormUpdated().type, () => {\n        gui.feedback(\n            t('alert.formupdated.msg'),\n            20,\n            t('alert.formupdated.heading')\n        );\n    });\n\n    return survey;\n}\n\n/**\n * Advanced/emergency handlers that should always be activated even if form loading fails.\n */\nfunction _setEmergencyHandlers() {\n    const flushBtn = document.querySelector(\n        '.side-slider__advanced__button.flush-db'\n    );\n\n    if (flushBtn) {\n        flushBtn.addEventListener('click', () => {\n            gui.confirm(\n                {\n                    msg: t('confirm.deleteall.msg'),\n                    heading: t('confirm.deleteall.heading'),\n                },\n                {\n                    posButton: t('confirm.deleteall.posButton'),\n                }\n            )\n                .then((confirmed) => {\n                    if (!confirmed) {\n                        throw new Error('Cancelled by user');\n                    }\n\n                    return store.flush();\n                })\n                .then(() => {\n                    location.reload();\n                })\n                .catch(() => {\n                    // Ignore error\n                });\n        });\n    }\n}\n\n/**\n * Adds/replaces branding if necessary, and unhides branding.\n *\n * @param { object } survey - [description]\n */\nfunction _addBranding(survey) {\n    const brandImg = document.querySelector('.form-header__branding img');\n    const attribute = settings.offline ? 'data-offline-src' : 'src';\n\n    if (\n        brandImg &&\n        survey.branding &&\n        survey.branding.source &&\n        brandImg.src !== survey.branding.source\n    ) {\n        brandImg.src = '';\n        brandImg.setAttribute(attribute, survey.branding.source);\n    }\n    brandImg.classList.remove('hide');\n\n    return survey;\n}\n\n/**\n * Swaps the theme if necessary.\n *\n * @param  { object } survey - [description]\n * @return { object }        [description]\n */\nfunction _swapTheme(survey) {\n    if (survey.form && survey.model) {\n        return gui.swapTheme(survey);\n    }\n    return Promise.reject(new Error('Received form incomplete'));\n}\n\nfunction _prepareInstance(modelStr, defaults) {\n    let model;\n    let init;\n    let existingInstance = null;\n\n    for (const path in defaults) {\n        if (Object.prototype.hasOwnProperty.call(defaults, path)) {\n            model =\n                model ||\n                new FormModel(modelStr, {\n                    full: false,\n                });\n            init = init || model.init();\n            if (Object.prototype.hasOwnProperty.call(defaults, path)) {\n                // if this fails, the FormModel will output a console error and ignore the instruction\n                model.node(path).setVal(defaults[path]);\n            }\n            // TODO: would be good to not include nodes that weren't in the defaults parameter\n            // HOWEVER, that would also set number of repeats to 0, which may be undesired\n            // TODO: would be good to just pass model along instead of converting to string first\n            existingInstance = model.getStr();\n        }\n    }\n\n    return existingInstance;\n}\n\nfunction _init(formParts) {\n    const formFragment = range.createContextualFragment(formParts.form);\n    formheader.after(formFragment);\n    const formEl = document.querySelector('form.or');\n\n    return controller\n        .init(formEl, {\n            modelStr: formParts.model,\n            instanceStr: _prepareInstance(formParts.model, settings.defaults),\n            external: formParts.externalData,\n            survey: formParts,\n        })\n        .then((form) => {\n            formParts.languages = form.languages;\n\n            document.querySelector('head>title').textContent =\n                utils.getTitleFromFormStr(formParts.form);\n            if (settings.print) {\n                gui.applyPrintStyle();\n            }\n            // after widgets have been initialized, localize all data-i18n elements\n            localize(formEl);\n\n            return formParts;\n        });\n}\n"],
  "mappings": "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",
  "names": ["init", "survey", "settings_default", "registration", "_reportOfflineLaunchCapable", "newWorker", "event_default", "err", "capable", "application_cache_default", "loader", "formheader", "survey", "settings_default", "range", "_setEmergencyHandlers", "_setAppCacheEventHandlers", "application_cache_default", "init", "form_cache_default", "_addBranding", "_swapTheme", "_updateMaxSizeSetting", "_init", "formParts", "loadTranslation", "_setFormCacheEventHandlers", "_showErrorOrAuthenticate", "isPreview", "store_default", "props", "connection_default", "error", "gui_default", "t", "event_default", "event", "capable", "scriptUrl", "flushBtn", "confirmed", "brandImg", "attribute", "_prepareInstance", "modelStr", "defaults", "model", "existingInstance", "path", "FormModel", "formFragment", "formEl", "controller_webform_default", "form", "utils_default", "localize"]
}
